#include "math.h"

float sqrt(float x)
{
	__asm
	{
		fld x
		fsqrt 
		fstp x
	}
	return x;
}

float abs(float value)
{
	if (value < 0)
		return value * (-1);
	else
		return value;
}

float cos(float value)
{
	__asm
	{
		fld value
		fcos 
		fstp value
	}
	return value;
};

float sin(float value)
{
	__asm
	{
		fld value
		fsin 
		fstp value
	}
	return value;
};

//float asin(float value)
//{
//	__asm
//	{
//		fld value
//		fld st(0)
//		fmul st,st(0)
//		fld1
//		fsubr
//		fsqrt
//		fpatan
//		fst value
//	}
//	return value;
//};

float asin(float value)
{
	const unsigned int ARCSIN_SIZE = 201;
	const float ARCSIN[ARCSIN_SIZE] = {
		-0.999998f, -0.999906f, -0.999568f, -0.998982f, -0.998149f, -0.997069f, -0.995742f, -0.994169f, -0.99235f, -0.990285f, 
-0.987976f, -0.985422f, -0.982624f, -0.979584f, -0.976301f, -0.972776f, -0.969011f, -0.965006f, -0.960762f, -0.956281f, 
-0.951563f, -0.94661f, -0.941422f, -0.936002f, -0.93035f, -0.924468f, -0.918357f, -0.912019f, -0.905456f, -0.898668f, 
-0.891658f, -0.884428f, -0.876979f, -0.869312f, -0.861431f, -0.853337f, -0.845031f, -0.836517f, -0.827796f, -0.818869f, 
-0.809741f, -0.800412f, -0.790884f, -0.781162f, -0.771246f, -0.761139f, -0.750844f, -0.740363f, -0.729699f, -0.718855f, 
-0.707833f, -0.696635f, -0.685265f, -0.673726f, -0.66202f, -0.65015f, -0.63812f, -0.625932f, -0.613588f, -0.601093f, 
-0.58845f, -0.57566f, -0.562729f, -0.549658f, -0.536451f, -0.523111f, -0.509642f, -0.496047f, -0.482329f, -0.468492f, 
-0.454539f, -0.440474f, -0.4263f, -0.41202f, -0.397638f, -0.383158f, -0.368583f, -0.353917f, -0.339163f, -0.324325f, 
-0.309408f, -0.294413f, -0.279346f, -0.26421f, -0.249008f, -0.233745f, -0.218424f, -0.203049f, -0.187623f, -0.172152f, 
-0.156637f, -0.141084f, -0.125496f, -0.109877f, -0.0942309f, -0.0785614f, -0.0628725f, -0.0471679f, -0.0314518f, -0.0157278f, 
0.0f, 0.0157278f, 0.0314518f, 0.0471679f, 0.0628724f, 0.0785613f, 0.0942309f, 0.109877f, 0.125496f, 0.141084f, 
0.156637f, 0.172152f, 0.187623f, 0.203049f, 0.218424f, 0.233745f, 0.249008f, 0.26421f, 0.279346f, 0.294413f, 
0.309408f, 0.324325f, 0.339163f, 0.353917f, 0.368583f, 0.383158f, 0.397638f, 0.41202f, 0.4263f, 0.440474f, 
0.454539f, 0.468492f, 0.48233f, 0.496047f, 0.509642f, 0.523111f, 0.536451f, 0.549658f, 0.562729f, 0.57566f, 
0.58845f, 0.601093f, 0.613588f, 0.625931f, 0.63812f, 0.65015f, 0.66202f, 0.673726f, 0.685265f, 0.696635f, 
0.707832f, 0.718855f, 0.729699f, 0.740363f, 0.750844f, 0.761139f, 0.771246f, 0.781162f, 0.790885f, 0.800412f, 
0.809741f, 0.818869f, 0.827796f, 0.836517f, 0.845031f, 0.853337f, 0.861431f, 0.869312f, 0.876979f, 0.884428f, 
0.891658f, 0.898668f, 0.905456f, 0.912019f, 0.918357f, 0.924468f, 0.93035f, 0.936002f, 0.941422f, 0.94661f, 
0.951563f, 0.956281f, 0.960762f, 0.965006f, 0.969011f, 0.972776f, 0.976301f, 0.979584f, 0.982624f, 0.985422f, 
0.987976f, 0.990285f, 0.99235f, 0.994169f, 0.995742f, 0.997069f, 0.998149f, 0.998982f, 0.999568f, 0.999906f, 
0.999998f
	};

	unsigned int index = ((value + 1.0f) * 100.0f);
	
	if (index >= ARCSIN_SIZE)
		index = ARCSIN_SIZE - 1;

	return ARCSIN[index];
};


float tan(float value)
{
	float vSin = sin(value);
	float vCos = cos(value);
	
	if (vCos == 0)
		return 0.0f;
	else
		return vSin / vCos;
};

extern "C"
{
    int __cdecl _ftol2(float f)
    {
        volatile int result;
        __asm fistp result;
        return result;
    }

    int __cdecl _ftol2_sse(float f)
    {
        volatile int result;
        __asm fistp result;
        return result;
    }
}